# This is a basic workflow to help you get started with Actions

name: Build and Deploy Application

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    deploy-infra:
        name: Deploy Azure Resources
        runs-on: ubuntu-latest
        steps:

        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true 
        
        - name: Deploy Azure Resources
          uses: azure/powershell@v1
          id: azure-deploy
          with: 
            azPSVersion: "latest"
            inlineScript: |
              $params = @{
                name = "app1";
              }

              $res = New-AzDeployment -TemplateFile "src/infra/bicep/main.bicep" -TemplateParameterObject $params -Location ${{ secrets.AZURE_REGION }}
              
              # Save the outputs from the deployment for later use
              $outputsJson = $res.Outputs | ConvertTo-Json -Depth 10
              Write-Output $outputsJson
              $outputsJson | Out-File deploymentOutput.json

        - name: Save deployment output
          uses: actions/upload-artifact@v2
          with:
            name: deploymentOutput
            path: deploymentOutput.json
    
    build-node:
        name: Build API and Frontend
        runs-on: ubuntu-latest
        
        steps:
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main

        - name: 'Setup Node'
          uses: actions/setup-node@v3
          with:
            node-version: '16'

        - name: 'Build API'
          run: |
            npm install
            npm run build
          working-directory: src/api

        - name: 'Build Frontend'
          run: |
            npm install
            npm run build        
          working-directory: src/frontend

        - name: Save API build output
          uses: actions/upload-artifact@v2
          with:
            name: buildApi
            path: src/api/*

        - name: Save frontend build output
          uses: actions/upload-artifact@v2
          with:
            name: buildFrontend
            path: src/frontend/dist/*

    publish-api:
        name: Publish API to Azure Function
        needs: [deploy-infra, build-node]
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main

        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true 

        - uses: actions/download-artifact@v2
          with:
            name: deploymentOutput

        - uses: actions/download-artifact@v2
          with:
            name: buildApi   
            path: src/api         

        - run: ls -alR

        - name: 'Get function name'
          id: function-metadata
          uses: azure/powershell@v1
          with: 
            azPSVersion: "latest"
            inlineScript: |
              $deploymentOutput = Get-Content deploymentOutput.json | ConvertFrom-Json -Depth 10
              $functionName = $deploymentOutput.FUNCTION_NAME.Value
              # $rgName = $deploymentOutput.RESOURCE_GROUP_NAME.Value

              # Write-Output "Getting publish profile for function $functionName in resource group $rgName"
              # $profile = (az functionapp deployment list-publishing-credentials --name $functionName --resource-group $rgName)
              # if($profile -eq $null) {
              #   Write-Error "Unable to retrieve publish profile"
              # }

              # echo "::set-output name=function_publish_profile::$profile"
              echo "::set-output name=function_name::$functionName"

        - name: 'Publish Azure Function'
          uses: Azure/functions-action@v1
          id: fa
          with:
            app-name: ${{ steps.function-metadata.outputs.function_name }}
            package: src/api
            # publish-profile: ${{ steps.func-publish-profile.outputs.function_publish_profile }}

    publish-web:
        name: Publish Website to Static Storage website
        needs: [deploy-infra, build-node]
        runs-on: ubuntu-latest

        steps:
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main

        - uses: actions/download-artifact@v2
          with:
            name: deploymentOutput

        - uses: actions/download-artifact@v2
          with:
            name: buildFrontend
            path: src/frontend

        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true

        - run: ls -alR 

        - name: 'Get storage account name'
          id: storage-name
          uses: azure/powershell@v1
          with: 
            azPSVersion: "latest"
            inlineScript: |
              $deploymentOutput = Get-Content deploymentOutput.json | ConvertFrom-Json -Depth 10
              $storageAccountName = $deploymentOutput.STORAGE_ACCOUNT_NAME.Value
              Write-Output "Found storage account $storageAccountName in deployment output"
              echo "::set-output name=storage_account_name::$storageAccountName"

        - name: 'Copy files to Azure Storage'
          uses: Azure/cli@v1
          env:
            STORAGE_ACCOUNT: ${{ steps.storage-name.outputs.storage_account_name }}
          with:
            inlineScript: |
              az storage blob service-properties update --account-name ${STORAGE_ACCOUNT} --static-website --404-document index.html --index-document index.html
              az storage blob upload-batch --auth-mode login --account-name ${STORAGE_ACCOUNT} --destination '$web' --source src/frontend/dist --overwrite true
